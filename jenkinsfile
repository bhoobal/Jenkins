node('Jenkins-Win2016') {
    // This limits build concurrency to 1 per branch
    properties([disableConcurrentBuilds()])

    def branch = env.BRANCH_NAME
    def versionPrefix = ""
    def suffix = ""
    def branchName = ""

    if (branch.contains("release")) {
       versionPrefix = "1.0."
       branchName = "Release"
    } else if (branch.contains("Dev")) {
       versionPrefix = "0.99."
       branchName = "Dev"
    } else if (branch.contains("master")) {
       versionPrefix = "1.0."
       branchName = "master"
    } else {
       branchName = branch.substring(branch.lastIndexOf("/") + 1)
       suffix = "-" + branchName
       versionPrefix = "0.98."
    }

    // Apply version number and use it later to tag images
    def versionNumber = versionPrefix + env.BUILD_NUMBER
    def fullVersion = versionNumber + suffix
    currentBuild.displayName = versionNumber + suffix

    try
    {
        stage ('Checkout') {
            checkout scm
        }

        stage ('Restore packages') {
            bat "dotnet restore --no-cache Some.application.Service.sln"
        }
        stage ('Build solution') {
            bat "./build.bat"
        }
        stage ('Run unit tests') {
            bat "./unittests.bat"
        }

        stage ('Prepare Acceptance tests') {
            // Presence of the containers indicate another is building. Abort immediately.
            bat "PowerShell.exe -ExecutionPolicy Bypass -Command .\\check-container-state.ps1"

            try {
                stage ('Compose containers') {
                    bat  "PowerShell.exe -ExecutionPolicy Bypass -Command .\\start_containers.ps1 -branch ${branchName}"
                }
                stage ('Run Acceptance Tests') {
                    bat  "PowerShell.exe -ExecutionPolicy Bypass -Command .\\runacceptancetests.ps1"
                }
            } finally {
                stage ('Bring containers down and archive the logs') {
                    bat "./stop_containers.bat"
                }
                stage ('Publish test results and logs') {
                    //Convert trx to xml for archiving
                    currentBuild.result = 'SUCCESS'
                    bat ".\\msxsl.exe .\\AcceptanceTests\\tests\\someDataSvc.AcceptanceTests\\bin\\Debug\\testresults.trx .\\mstest-to-junit.xsl -o .\\TestResult.xml"
                    step([$class: 'JUnitResultArchiver', testResults: '**/TestResult.xml'])
                    publishHTML(target:[allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: './AcceptanceTests/tests/someDataSvc.AcceptanceTests/bin/Debug', reportFiles: 'logs.txt', reportName: 'WebApi logs'])
                }
            }
        }
    }
    catch (error)
    {
        echo "An error occurred during execution of packaging - ${error.getMessage()}."
        SendBuildFailureMessage()
        // re-throw error to maintain logic flow
        throw error
    }

    echo "Build result is ${currentBuild.result}"
    if (currentBuild.result=='SUCCESS') {
        stage ('Coverage') {
       //     bat "./coverage.bat"
       //     step([$class: 'CoberturaPublisher', autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: '**/outputCobertura.xml', failUnhealthy: true, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false])
      //      publishHTML(target:[allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: './CoverageReport', reportFiles: '*', reportName: 'OpenCover Report'])
        }

        if (branch.contains("release")) {
            stage ('Build Release Images') {
                bat "docker build -t AWSAccount.dkr.ecr.us-west-2.amazonaws.com/Some-Some-webapi:latest-release-${fullVersion} ./Artifacts/WebApi"
                
                stage ('Tag repository') {
                    bat 'git rev-parse HEAD > GIT_COMMIT'
                    def gitCommit=readFile('GIT_COMMIT').trim()
                    def tagParameters = [
                        new StringParameterValue("REPO_NAME", "Some.Productivity3D.Service"),
                        new StringParameterValue("COMMIT_ISH", gitCommit),
                        new StringParameterValue("TAG", fullVersion)]
                        
                    build job: "tag-vso-commit", parameters: tagParameters
                }
            }

            //Publish to AWS Repo
            stage ('Get ecr login, push image to Repo') {
                bat "PowerShell.exe -ExecutionPolicy Bypass -Command .\\PushImages.ps1 -fullVersion latest-release-${fullVersion}"
            }
        } else if (branch.contains("master")) {
            def buildArtifact = '3DPSomeWebApi.zip'
            archiveArtifacts artifacts: buildArtifact, fingerprint: true

            // This stage is only necessarly so long as the Prod deployments are not containerised.
            stage ('Upload artifact to S3 deployment repository') {
                bat "powershell.exe -ExecutionPolicy Bypass -Command aws s3 cp ${buildArtifact} s3://Some/someservice/Releases/${buildArtifact} --acl public-read --profile Some-grant"
            }

            stage ('Tag repository') {
                bat 'git rev-parse HEAD > GIT_COMMIT'
                def gitCommit=readFile('GIT_COMMIT').trim()
                def tagParameters = [
                    new StringParameterValue("REPO_NAME", "Some.Productivity3D.Service"),
                    new StringParameterValue("COMMIT_ISH", gitCommit),
                    new StringParameterValue("TAG", fullVersion+"-master")]

                build job: "tag-vso-commit", parameters: tagParameters
            }
        } else {
            //Rebuild Image, tag & push to AWS Docker Repo
            stage ('Build Development Images') {
                bat "docker build -t AWSAccount.dkr.ecr.us-west-2.amazonaws.com/Some-Some-webapi:${fullVersion}-${branchName} ./Artifacts/WebApi"
                bat "docker build -t AWSAccount.dkr.ecr.us-west-2.amazonaws.com/Some-Some-webapi:latest ./Artifacts/WebApi"
            }
            //Publish to AWS Repo
            stage ('Get ecr login, push image to Repo') {
                bat "PowerShell.exe -ExecutionPolicy Bypass -Command .\\PushImages.ps1 -fullVersion ${fullVersion}-${branchName}"
            }
        }
    }
    else {
        SendBuildFailureMessage()
    }
}

/* Send build failure message */
def SendBuildFailureMessage() {
    echo "Sending failure email..."
    try
    {
        def changelogs = GetChangeLogs()

        // Build may have failed after being manually restarted with no new commits and so no 'committer' to email.
        if (changelogs == null) {
            return
        }

        commitVals = changelogs.split(',')
        committer = commitVals[0]
        committerEmail = commitVals[1]
        commitId = commitVals[2]
    }
    catch (error)
    {
        echo "Unable to determine committer for failure email: ${error.getMessage()}"
    }

    def body = "${env.JOB_NAME} - build failed"
    body = "${body}\nBuild #: ${env.BUILD_ID}"
    body = "${body}\nCommitters: ${committer}"
    body = "${body}\nCommit SHA: ${commitId}"
    body = "${body}\nSee console log at ${env.BUILD_URL}console for details"

    retry(2)
    {
        mail body: "${body}",
        from: 'jenkins_noreply@vspengg.com',
        subject: "${env.BUILD_URL} Failed",
        cc: (env.BRANCH_NAME == 'master' ? 'SomeTeam@example.com' : ''),
        to: committerEmail
    }
}

/* Get the changelogs for the commit which triggered this build. */
@NonCPS
def GetChangeLogs() {
    def changeLogSets = currentBuild.changeSets
    def commitVals
    for (int i = 0; i < changeLogSets.size(); i++)
    {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++)
        {
            def entry = entries[j]
            def email = entry.author.getProperty(hudson.tasks.Mailer.UserProperty.class).getAddress()
            commitVals = "${entry.author},${email},${entry.commitId}"
        }
    }
    return commitVals
}
----------------------------------------------------------
pipeline {
    agent {
        node {
            label 'slave-test'
        }
    }
    environment {
       NumRetries = "2"
       test_environment = "UAT"
       browser_use_grid = "true"
       browser_grid_provider = "browserstack"
       browserstack_resolution = "1920x1080"
       browserstack_use_vpn = "true"
       kinesisfirehose_enabled = "true"
       kinesisfirehose_deliverystream = "Kinesislogstream"
       kinesisfirehose_regionendpoint = "au-west-1"
       kinesisfirehose_rolearn = "arn:aws:iam:::role/firehose_delivery_role"
       MSBUILDDISABLENODEREUSE = "1"
    }
	parameters {
        string(name: 'GitBranch', defaultValue: 'develop', description: 'the branch to clone')
        string(name: 'TestFilter', defaultValue: '"TestCategory=gory"', description: 'dotnet test --filter [value]\n\nEXAMPLES VALUES\n* Tests\n* FullyQualifiedName~Tests\nthese two first examples are equivalent\n* Name!=MyTestMethod\n* "ClassName=MyTestClass1 | ClassName=MyTestClass2"\n* "TestCategory=Customer & Priority=1"\n\nDOCS https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test?tabs=netcore21#filter-option-details')
        string(name: 'test_platform', defaultValue: 'windows_10_chrome_90', description: 'the platform details to use in running the tests')
        booleanParam(name: 'testcase_read', defaultValue: true, description: 'use TestRail to filter execution')
        booleanParam(name: 'testcase_write', defaultValue: false, description: 'write results to a pre-existing TestRail Plan')
        string(name: 'testrail_case_includes', defaultValue: '', description: 'the category or delimited list of categories to run tests from')
        string(name: 'testcase_planid', defaultValue: '', description: 'the TestRail plan to write results to')
        string(name: 'NumThreads', defaultValue: '7', description: '')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 1, unit: 'HOURS')
        timestamps()
    }
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir() /* clean up our workspace */
            }
        }
        stage('Get code from BitBucket') { // for display purposes
            steps {
                // Get code from a BitBucket repository
                git branch: "${GitBranch}", changelog: false, credentialsId: '123342-23423-f764543712c9', poll: false, url: "https://repourl://t.tests.git"

                // update build name
                script {
                    // Get the revision
                    shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
                    currentBuild.displayName = "#${BUILD_NUMBER}-${GitBranch}-${shortCommit}"
                }
            }
        }
        stage('Build Solution') {
            steps {
                bat(returnStdout: false, script: "dotnet build api.Automation.sln")
            }
            post {
                success {
                    echo 'Build Solution completed successfully'
                }
            }
        }
        stage('Test Solution') {
            steps {
                bat(returnStdout: false, script: "dotnet test api.ui.Automation.sln --no-build --no-restore -l \"trx;LogFileName=UnitTestResults.trx\" --filter \"${TestFilter}\"")
            }
            post {
                always {
                    echo 'Archiving Test Results and Logs'
                    archiveArtifacts artifacts: '**\\TestResults\\*', fingerprint: true, allowEmptyArchive: true
                    echo 'Publishing Test Results'
                    publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'TestResults', reportFiles: 'TestResults.html', reportName: 'Test Results HTML', reportTitles: ''])
                    catchError {
                        step([$class: 'MSTestPublisher', testResultsFile:"**\\TestResults\\*.trx", failOnError: true, keepLongStdio: true])
                        echo 'sending results to logstash...' 
                        logstashSend failBuild: false, maxLines: 2
                    }
                }
                success {
                    echo 'Test Solution completed successfully'
                }
            }
        }
    }
    post {
        success {
            echo 'Successful Build'
        }
        unstable {
            echo 'Unstable Build'
        }
        failure {
            echo 'Failed Build'
        }
        changed {
            echo 'Status Change from previous build'
        }
    }
}


pipeline {
    agent {
        node {
            label 'development'
        }
    }
    environment {
       test_environment = "development"
       browser_use_grid = "true"
       browser_grid_provider = "browserstack"
       browserstack_resolution = "1920x1080"
       browserstack_use_vpn = "true"
       kinesisfirehose_enabled = "true"
       kinesisfirehose_deliverystream = "streamname"
       kinesisfirehose_regionendpoint = "au-west-1"
       kinesisfirehose_rolearn = "arn:aws:iam::123457689:role/firehose_delivery_role"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 1, unit: 'HOURS')
        timestamps()
    }
    parameters {
        string(name: 'GitBranch', defaultValue: 'develop', description: 'the branch to clone')
        string(name: 'TestFilter', defaultValue: '"TestCategory=sometestCategory"', description: 'dotnet test --filter [value]\n\nEXAMPLES VALUES\n* Tests\n* FullyQualifiedName~Tests\nthese two first examples are equivalent\n* Name!=MyTestMethod\n* "ClassName=MyTestClass1 | ClassName=MyTestClass2"\n* "TestCategory=Customer & Priority=1"\n\nDOCS https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test?tabs=netcore21#filter-option-details')
        string(name: 'test_platform', defaultValue: 'windows_10_chrome_90', description: 'the platform details to use in running the tests')
        booleanParam(name: 'testcase_read', defaultValue: true, description: 'use TestRail to filter execution')
        booleanParam(name: 'testcase_write', defaultValue: false, description: 'write results to a pre-existing TestRail Plan')
        string(name: 'testrail_case_includes', defaultValue: '', description: 'the category or delimited list of categories to run tests from')
        string(name: 'testcase_planid', defaultValue: '', description: 'the TestRail plan to write results to')
        string(name: 'NumThreads', defaultValue: '7', description: '')
    }
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir() /* clean up our workspace */
            }
        }
        stage('Get code from BitBucket') { // for display purposes
            steps {
                // Get code from a BitBucket repository
                git branch: "${GitBranch}", changelog: false, credentialsId: '12342-234324-22344543712c9', poll: false, url: "https://repourl/tests.git"

                // update build name
                script {
                    // Get the revision
                    shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
                    currentBuild.displayName = "#${BUILD_NUMBER}-${GitBranch}-${shortCommit}"
                }
            }
        }
        stage('Build Solution') {
            steps {
                bat(returnStdout: false, script: "dotnet build api.ui.Tests.sln")
            }
            post {
                success {
                    echo 'Build Solution completed successfully'
                }
            }
        }
        stage('Test Solution') {
            steps {
                bat(returnStdout: false, script: "dotnet test api.ui.Tests.sln --no-build --no-restore -l \"trx;LogFileName=UnitTestResults.trx\" --filter ${TestFilter}")
            }
            post {
                always {
                    echo 'Archiving Test Results and Logs'
                    archiveArtifacts artifacts: '**\\TestResults\\*', fingerprint: true, allowEmptyArchive: true
                    catchError {
                        step([$class: 'MSTestPublisher', testResultsFile:"**\\TestResults\\*.trx", failOnError: true, keepLongStdio: true])
                    }
                }
                success {
                    echo 'Test Solution completed successfully'
                }
            }
        }
    }
    post {
        always {
            catchError{
                echo 'sending results to logstash...'
                    logstashSend failBuild: false, maxLines: 2
                echo 'Publishing HTML file'
                    publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'TestResults', reportFiles: 'TestResults.html', reportName: 'Test Results HTML', reportTitles: ''])
            }
        }
        success {
            echo 'Successful Build'
            slackSend channel: '#alertchannel',
            token: 'asdfa234sdf234ds32',
            color: 'good',
            message: "Build: ${currentBuild.fullDisplayName} - Successful! |  Test Report: ${BUILD_URL}Test_20Report"
        }
        unstable {
            echo 'Unstable Build'
			slackSend channel: '#alertchannerl',
            token: 'asd34s34cv43v43v4',
            color: 'danger',
            message: "Build: ${currentBuild.fullDisplayName} - Unstable! |  Test Report: ${BUILD_URL}Test_20Report"
        }
        failure {
            echo 'Failed Build'
            echo 'Archiving everything...'
            archiveArtifacts artifacts: '**\\*', fingerprint: false, allowEmptyArchive: true
            slackSend channel: '#alertchannerl',
            token: '`fsd324dskf4387dsyk43d',
            color: 'danger',
            message: "Build: ${currentBuild.fullDisplayName} - Failed! |  Test Report: ${BUILD_URL}Test_20Report"
        }
        changed {
            echo 'Status Change from previous build'
        }
    }
}

----------------------------------------------------------
